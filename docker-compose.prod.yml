version: '3'

# The only exposed service here is the actual app.
# It's your call if you want to expose the other services to the host. However, make sure to use actual
# env variables here if you choose to map the port to the host!!


services:
  db:
    env_file: ./.env
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_DATABASE}

    expose:
      - 3306
    networks:
      - app_network
    restart: always
    volumes:
      - db:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  supertokens:
    env_file: ./.env
    image: registry.supertokens.io/supertokens/supertokens-mysql:7.0
    depends_on:
      - db
    expose:
      - 3567

    environment:
      MYSQL_CONNECTION_URI: mysql://${DB_USER}:${DB_PASS}@db:3306/${DB_DATABASE}
    networks:
      - app_network
    restart: always

    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    env_file: ./.env
    image: redis:latest
    expose:
      - 6379
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'

    restart: always

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

    volumes:
      - redis:/var/lib/redis

    networks:
      - app_network

  server:
    build:
      context: .
      dockerfile: Dockerfile

    depends_on:
      - db
      - supertokens
      - redis

    env_file: ./.env

    # Most of the env vars are loaded directly from .env, we only need to override some to make sure
    # the docker resources are accessible.
    environment:
      DB_HOST: db
      SUPERTOKENS_CORE_URI: http://@supertokens:3567
      REDIS_URL: redis://redis:6379
      SERVER_PORT: 5000

    restart: always

    command: ["yarn", "start"]

    networks:
      - app_network
    volumes:
      - gamenode:/usr/src/gamenode

    deploy:
      # Edit this to your liking.
      replicas: 3
      restart_policy:
        condition: on-failure

    expose:
      - "5000"

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.server.rule=Host(`${GAME_NODE_SERVER_HOSTNAME}`)'
      - 'traefik.http.routers.server.entrypoints=websecure'
      - 'traefik.http.services.server.loadbalancer.server.port=5000'

  traefik:
    image: traefik:v2.5
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

    # Point your domain to the server's hostname:8080.
    # This avoids conflicts with the web-client's compose file.
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  gamenode:
  redis:
  db:

