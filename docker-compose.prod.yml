version: '3'


services:
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: gamenode

    expose:
      - 3306
    networks:
      - game_node_app
    restart: always
    volumes:
      - db:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-mysql:7.0
    depends_on:
      - db
    expose:
      - 3567

    environment:
      MYSQL_CONNECTION_URI: mysql://${DB_USER}:${DB_PASS}@db:3306/gamenode
    networks:
      - game_node_app
    restart: always

    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    expose:
      - 6379
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'

    restart: always

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

    volumes:
      - redis:/var/lib/redis

    networks:
      - game_node_app

  server:
    build:
      context: .
      dockerfile: Dockerfile

    depends_on:
      - db
      - supertokens
      - redis

    # Most of the env vars are loaded directly from .env, we only need to override some to make sure
    # the docker resources are accessible.
    environment:
      DB_HOST: db
      DB_DATABASE: gamenode
      SUPERTOKENS_CORE_URI: http://@supertokens:3567
      REDIS_URL: redis://redis:6379
      SERVER_PORT: 5000

    restart: always

    command: ["yarn", "start"]

    #    deploy:
    #      replicas: 3

    networks:
      - game_node_app
    volumes:
      - gamenode:/usr/src/gamenode

networks:
  game_node_app:
    external: true

volumes:
  # Nginx Proxy Manager
  npm:
  gamenode:
  redis:
  db:

